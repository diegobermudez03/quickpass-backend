// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"flag"
	"github.com/foxinuni/quickpass-backend/internal/core"
	"github.com/foxinuni/quickpass-backend/internal/data/repo"
	"github.com/foxinuni/quickpass-backend/internal/domain/services"
	"github.com/google/wire"
	"github.com/joho/godotenv"
	"github.com/rs/zerolog"
	"github.com/rs/zerolog/log"
	"os"
)

// Injectors from main.go:

func buildImportService(applicationConfig *core.ApplicationConfig) (services.ImportService, error) {
	storeFactory, err := core.NewPostgresStoreFactory(applicationConfig)
	if err != nil {
		return nil, err
	}
	userStore := core.BuildUserStore(storeFactory)
	userRepository := repo.NewStoreUserRepository(userStore)
	occasionStore := core.BuildOccasionStore(storeFactory)
	eventStore := core.BuildEventStore(storeFactory)
	eventRepository := repo.NewStoreEventRepository(occasionStore, eventStore)
	accomodationStore := core.BuildAccomoStore(storeFactory)
	accomodationRepository := repo.NewStoreAccomodationRepository(accomodationStore)
	bookingStore := core.BuildBookingStore(storeFactory)
	bookingRepository := repo.NewStoreBookingRepository(bookingStore, accomodationStore)
	stateStore := core.BuildStateStore(storeFactory)
	logStore := core.BuildLogStore(storeFactory)
	occasionRepository := repo.NewStoreOccasionRepository(occasionStore, userStore, eventStore, bookingStore, accomodationStore, stateStore, logStore)
	stateRepository := repo.NewStoreStateRepository(stateStore)
	stateService := services.NewRepoStateService(stateRepository)
	importService := services.NewExcelImportService(userRepository, eventRepository, accomodationRepository, bookingRepository, occasionRepository, stateService)
	return importService, nil
}

// main.go:

var (
	file   string
	config *core.ApplicationConfig
)

var importSet = wire.NewSet(services.NewExcelImportService, services.NewRepoStateService, repo.NewStoreOccasionRepository, repo.NewStoreUserRepository, repo.NewStoreSessionRepository, repo.NewStoreStateRepository, repo.NewStoreEventRepository, repo.NewStoreAccomodationRepository, repo.NewStoreBookingRepository, core.BuildUserStore, core.BuildEventStore, core.BuildStateStore, core.BuildOccasionStore, core.BuildAccomoStore, core.BuildBookingStore, core.BuildLogStore, core.NewPostgresStoreFactory)

func init() {
	log.Logger = log.Output(zerolog.ConsoleWriter{Out: os.Stderr})
	zerolog.SetGlobalLevel(zerolog.DebugLevel)
	flag.StringVar(&file, "file", "test.xlsx", "Excel file to import")
	flag.Parse()

	if _, err := os.Stat(file); os.IsNotExist(err) {
		panic("Excel file does not exist")
	}

	if err := godotenv.Load(); err != nil {
		log.Warn().Msg("No \".env\" file found! Using environment variables.")
	}

	if c, err := core.LoadConfig(); err != nil {
		log.Fatal().Err(err).Msg("Failed to load configuration")
	} else {
		config = c
	}
}

func main() {

	reader, err := os.Open(file)
	if err != nil {
		panic(err)
	}

	importService, err := buildImportService(config)
	if err != nil {
		panic(err)
	}
	log.Info().Msgf("Importing from file %q...", file)
	if _, err := importService.ImportFromFile(reader); err != nil {
		panic(err)
	}
}
