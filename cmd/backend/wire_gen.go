// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/foxinuni/quickpass-backend/internal/core"
	"github.com/foxinuni/quickpass-backend/internal/data/repo"
	"github.com/foxinuni/quickpass-backend/internal/domain/services"
	"github.com/foxinuni/quickpass-backend/internal/presentation"
	"github.com/foxinuni/quickpass-backend/internal/presentation/auth"
	"github.com/foxinuni/quickpass-backend/internal/presentation/controllers"
	"github.com/foxinuni/quickpass-backend/internal/presentation/routes"
	"github.com/google/wire"
)

// Injectors from bootstrap.go:

func BootstrapServer(options *core.ApplicationConfig) (*presentation.QuickpassAPI, error) {
	storeFactory, err := core.NewPostgresStoreFactory(options)
	if err != nil {
		return nil, err
	}
	userStore := core.BuildUserStore(storeFactory)
	userRepository := repo.NewStoreUserRepository(userStore)
	sessionStore := core.BuildSessionStore(storeFactory)
	sessionRepository := repo.NewStoreSessionRepository(sessionStore, userStore)
	emailService := services.NewSendgridEmailService(options)
	authService, err := services.NewJwtAuthService(options, userRepository, sessionRepository, emailService)
	if err != nil {
		return nil, err
	}
	loginController := controllers.NewLoginController(authService)
	authStrategy := auth.NewAuthServiceStrategy(authService)
	authRouter := routes.NewAuthRouter(loginController, authStrategy)
	occasionStore := core.BuildOccasionStore(storeFactory)
	eventStore := core.BuildEventStore(storeFactory)
	bookingStore := core.BuildBookingStore(storeFactory)
	accomodationStore := core.BuildAccomoStore(storeFactory)
	stateStore := core.BuildStateStore(storeFactory)
	logStore := core.BuildLogStore(storeFactory)
	occasionRepository := repo.NewStoreOccasionRepository(occasionStore, userStore, eventStore, bookingStore, accomodationStore, stateStore, logStore)
	stateRepository := repo.NewStoreStateRepository(stateStore)
	stateService := services.NewRepoStateService(stateRepository)
	occassionService := services.NewRepoOccassionsService(occasionRepository, stateService)
	myOccasionsController := controllers.NewMyOccasionsController(occassionService)
	myOccasionsRouter := routes.NewMyOccasionsRouter(myOccasionsController, authStrategy)
	bookingRepository := repo.NewStoreBookingRepository(bookingStore, accomodationStore)
	bookingsService := services.NewRepoBookingsService(occasionRepository, bookingRepository, stateService, emailService)
	myBookingsController := controllers.NewMyBookingsController(bookingsService)
	myBookingsRouter := routes.NewMyBookingsRouter(myBookingsController, authStrategy)
	eventRepository := repo.NewStoreEventRepository(occasionStore, eventStore)
	eventsService := services.NewRepoEventsService(occasionRepository, eventRepository, stateService, emailService)
	myEventsController := controllers.NewMyEventsController(eventsService)
	myEventsRouter := routes.NewMyEventsRouter(myEventsController, authStrategy)
	logRepository := repo.NewStoreLogRepository(logStore, occasionStore, userStore)
	actionsService := services.NewRepoActionsService(logRepository, occasionRepository)
	webSocketsController := controllers.NewWebSocketsController(actionsService)
	actionsController := controllers.NewActionsController(actionsService, webSocketsController, occassionService)
	actionsRouter := routes.NewActionsRouter(actionsController, authStrategy)
	eventsController := controllers.NewEventsController(eventsService)
	eventsRouter := routes.NewEventsRouter(eventsController)
	sessionService := services.NewRepoSessionService(sessionRepository)
	sessionController := controllers.NewSessionController(sessionService)
	sessionsRouter := routes.NewSessionsRouter(sessionController)
	accomodationRepository := repo.NewStoreAccomodationRepository(accomodationStore)
	importService := services.NewExcelImportService(userRepository, eventRepository, accomodationRepository, bookingRepository, occasionRepository, stateService)
	occasionsController := controllers.NewOccasionsController(importService)
	occasionsRouter := routes.NewOccasionsRouter(occasionsController)
	bookingsController := controllers.NewBookingsController(bookingsService)
	bookingsRouter := routes.NewBookingsRouter(bookingsController)
	logsController := controllers.NewLogsController(actionsService)
	logsRouter := routes.NewLogsRouter(logsController)
	webSocketRouter := routes.NewWebSocketRouter(webSocketsController)
	quickpassAPI := presentation.NewQuickpassAPI(options, authRouter, myOccasionsRouter, myBookingsRouter, myEventsRouter, actionsRouter, eventsRouter, sessionsRouter, occasionsRouter, bookingsRouter, logsRouter, webSocketRouter)
	return quickpassAPI, nil
}

// bootstrap.go:

// First we create the store factory to create all stores
var backendSet = wire.NewSet(presentation.NewQuickpassAPI, routes.NewBookingsRouter, routes.NewAuthRouter, routes.NewMyOccasionsRouter, routes.NewMyBookingsRouter, routes.NewMyEventsRouter, routes.NewActionsRouter, routes.NewEventsRouter, routes.NewSessionsRouter, routes.NewOccasionsRouter, routes.NewLogsRouter, routes.NewWebSocketRouter, controllers.NewBookingsController, controllers.NewOccasionsController, controllers.NewLoginController, controllers.NewMyOccasionsController, controllers.NewMyBookingsController, controllers.NewMyEventsController, controllers.NewActionsController, controllers.NewEventsController, controllers.NewSessionController, controllers.NewLogsController, controllers.NewWebSocketsController, auth.NewAuthServiceStrategy, services.NewExcelImportService, services.NewJwtAuthService, services.NewSendgridEmailService, services.NewRepoSessionService, services.NewRepoOccassionsService, services.NewRepoStateService, services.NewRepoBookingsService, services.NewRepoActionsService, services.NewRepoEventsService, repo.NewStoreOccasionRepository, repo.NewStoreUserRepository, repo.NewStoreSessionRepository, repo.NewStoreStateRepository, repo.NewStoreLogRepository, repo.NewStoreEventRepository, repo.NewStoreAccomodationRepository, repo.NewStoreBookingRepository, core.BuildUserStore, core.BuildSessionStore, core.BuildEventStore, core.BuildBookingStore, core.BuildStateStore, core.BuildOccasionStore, core.BuildAccomoStore, core.BuildLogStore, core.NewPostgresStoreFactory)
